我们已经学习了vue-router的基本知识，下面来拓展一个新技能--**Vuex**，Vuex 是一个专为 Vue.js 应用程序开发的**状态管理模式**。它采用集中式存储管理应用的所有组件的状态，并以相应的规则保证状态以一种可预测的方式发生变化。

<!--more-->

让我们从一个简单的Vue计数应用开始解释这种模式

```
new Vue({
  //state,驱动应用的数据源
  data(){
    return{
      count:0
    }
  },
  //view，以声明方式将state映射到视图
  template:`<div>{{count}}</div>`,
  //actions，响应在view上的用户输入导致的状态变化
  methods:{
    increment(){
      this.count++;
    }
  }
  })
```

以下是一个表示“单向数据流”理念的极简示意：

![单向数据流图](http://vuex.vuejs.org/zh-cn/images/flow.png)

<hr>

#### 核心概念

##### State

###### 单一状态树
Vuex 使用 单一状态树 —— 是的，用一个对象就包含了全部的应用层级状态。至此它便作为一个**『唯一数据源(SSOT)』**而存在。这也意味着，每个应用将仅仅包含一个 store 实例。单一状态树让我们能够直接地定位任一特定的状态片段，在调试的过程中也能轻易地取得整个当前应用状态的快照。

###### Vue组件中获取Vuex状态

由于 Vuex 的状态存储是响应式的，从 store 实例中读取状态最简单的方法就是在**计算属性**中返回某个状态：

```
//创建一个Counter组件
const Counter={
  template:`<div>{{count}}</div>`,
  computed:{
    count(){
      return store.state.count
    }
  }
}

```
每当store.state.count有变化时，都会重新求取计算属性，并且触发更新相关联的DOM

Vuex 通过 `store` 选项，提供了一种机制将状态从根组件『注入』到每一个子组件中（需调用 `Vue.use(Vuex)`）：

```
const app=new Vue({
  el:'#app',
  //把store对象提供给"store"选项，可以把store的实例全部注入到每一个子组件中
  store,
  components:{Counter}.
  template:`<div class="app">
  <counter></counter>
  </div>`
  })
```

现在再来更新下`Counter`的实现

```
const Counter={
  template:`<div>{{count}}</div>`,
  computed:{
    count(){
      return this.$store.state.count
    }
  }
}
```

##### Getters

getters可以认为是store的计算属性，它接收state作为其第一个参数：
```
const store=new Vuex.Store({
  state:{
    todos:[
    {id:1,text:'...',done:true},
    {id:2,text:'...',done:false}
    ]
  },
  getters:{
    doneTodos:state=>{
      return state.todos.filter(todo=>todo.done)
    }
  }
  })
```

Getters会暴露为**store.getters**对象：
```
store.getters.doneTodos
```

Getters也可以接受其他getters作为第二个参数：
```
getters{
  //...
  doneTodosCount:(state,getters)=>{
    return getters.doneTodos.length
  }
}

store.getters.doneTodosCount//->1
```

然后我们可以很容易的在任何组件中使用它

```
computed: {
  doneTodosCount () {
    return this.$store.getters.doneTodosCount
  }
}
```

##### Mutations

更改 Vuex 的 store 中的状态的唯一方法是**提交 mutation**。Vuex 中的 mutations 非常类似于事件：每个 mutation 都有一个字符串的 **事件类型 (type)** 和 一个 **回调函数 (handler)**。这个回调函数就是我们实际进行状态更改的地方，并且它会接受 state 作为第一个参数：
```
const store=new Vuex.Store({
  state:{
    count:1
  },
  mutations:{
    increment(state){
      //变更状态
      state.count++
    }
  }
  })
```

你不能直接调用一个mutation handler，这个选项更像是事件注册：“当引发一个类型为increment的mutation时，调用此函数”。要唤醒一个handler，你需要以相应的type来调用commit方法:
```
store.commit('increment')
```

###### 提交载荷(Payload)

你可以向 store.commit 传入额外的参数，即 mutation 的 **载荷（payload）**

在大多数情况下，载荷应该是一个对象，这样可以包含多个字段并且记录的 mutation 会更易读，你可以抽取它的具体属性来进行操作

###### 对象风格的提交方式
提交 mutation 的另一种方式是直接使用包含 `type` 属性的对象：
```
store.commit({
  type:'increment',
  amount:10
  })
```

###### Mutations需要遵守的规则

1. 提前在store中初始化好所需属性
2. 当需要在对象上新添加属性时，你应该

 - 使用 Vue.set(obj, 'newProp', 123) or
 - 以新对象替换老对象。例如，利用 stage-3 的对象展开运算符我们可以这样写：

 ```
 state.obj = { ...state.obj, newProp: 123 }
 ```

###### mutation必须是同步函数

```
//A simple example
mutations:{
  someMutation(state){
    api.callAsyncMethod()=>{
      state.count++
    }
  }
}
```

##### Actions

为了解决mutation中的异步混乱问题，我们引入Action

- Action 提交的是 mutation，而不是直接变更状态。
- Action 可以包含任意异步操作。

让我们简单的注册一个action
```
const store=new Vuex.Store({
  state:{
    count:0
  },
  mutations:{
    increment(state){
      state.count++
    }
  },
  actions:{
    increment(context){
      context.commit('increment')
    }
  }
  })
```

###### 分发Action

Action通过`store.dispatch`方法触发：

```
store.dispatch('increment')
```

我们可以在action内部执行异步操作

```
actions:{
  incrementAsync({commit}){
    //采用ES015参数解构
    setTimeout(()=>{
      commit('increment')
      },1000)
  }
}
```

Actions支持同样的载荷方式和对象方式进行分发：
```
// 以载荷形式分发
store.dispatch('incrementAsync', {
  amount: 10
})

// 以对象形式分发
store.dispatch({
  type: 'incrementAsync',
  amount: 10
})
```

来一个实际的购物车示例，涉及到**调用异步API**和**分发多重mutations**:

```
actions:{
  checkout({commit,state},products){
    //把当前购物车的物品备份
    const savedCartItems=[...state.cart.added]
    //发出结账请求，然后乐观地清空购物车
    commit(types.CHECKOUT_REQUEST)
    //购物API接收一个成功回调和一个失败回调
    shop.buyProducts(
      products,
      //成功
      ()=>commit(types.CHECKOUT_SUCCESS),
      //失败
      ()=>commit(types.CHECKOUT_FAILURE,savedCartItems)
      )
  }
}
```

如果我们要处理更加复杂的异步流程，我们可以采用返回一个`Promise`对象的方式或者采用ES7的新特性`async await`来组合action

##### Modules
由于使用单一状态树，应用的所有状态会集中到一个比较大的对象。当应用变得非常复杂时，store 对象就有可能变得相当臃肿。

为了解决以上问题，Vuex 允许我们将 store 分割成模块（module）。每个模块拥有自己的 state、mutation、action、getter、甚至是嵌套子模块——从上至下进行同样方式的分割：

```
const moduleA = {
  state: { ... },
  mutations: { ... },
  actions: { ... },
  getters: { ... }
}

const moduleB = {
  state: { ... },
  mutations: { ... },
  actions: { ... }
}

const store = new Vuex.Store({
  modules: {
    a: moduleA,
    b: moduleB
  }
})

store.state.a // -> moduleA 的状态
store.state.b // -> moduleB 的状态
```

###### 模块的局部状态

```
const moduleA = {
  state: { ... },
  mutations: { ... },
  actions: { ... },
  getters: { ... }
}

const moduleB = {
  state: { ... },
  mutations: { ... },
  actions: { ... }
}

const store = new Vuex.Store({
  modules: {
    a: moduleA,
    b: moduleB
  }
})

store.state.a // -> moduleA 的状态
store.state.b // -> moduleB 的状态
```

同样，对于模块内部的 action，局部状态通过 `context.state` 暴露出来， 根节点状态则为 `context.rootState`：

```
const moduleA = {
  // ...
  actions: {
    incrementIfOddOnRootSum ({ state, commit, rootState }) {
      if ((state.count + rootState.count) % 2 === 1) {
        commit('increment')
      }
    }
  }
}
```

对于模块内部的 getter，根节点状态会作为第三个参数暴露出来：

```
const moduleA = {
  // ...
  getters: {
    sumWithRootCount (state, getters, rootState) {
      return state.count + rootState.count
    }
  }
}
```


###### 命名空间
启用了命名空间的 `getter` 和 `action` 会收到局部化的 `getter`，`dispatch` 和 `commit`。换言之，你在使用模块内容（module assets）时不需要在同一模块内额外添加空间名前缀。更改 `namespaced` 属性后不需要修改模块内的代码。

####### 模块动态注册
在store创建之后，你可以用`store.registerModule`方法来注册模块
```
//注册模块
store.registerModule('myModule',{
  //...
  })
  //注册嵌套模块
  store.registerModule(['nested',myModule]),
  //...
```

之后就可以通过 `store.state.myModule` 和 `store.state.nested.myModule` 访问模块的状态。

你也可以使用 `store.unregisterModule(moduleName)` 来动态卸载模块。注意，你不能使用此方法卸载静态模块（即创建 store 时声明的模块）。

###### 模块重用
与解决Vue组件中的`data`采用同样的解决办法--使用一个函数来生命模块状态
```
const MyReusableModule={
  state(){
    return{
      foo:'bar'
    }
  },
  //mutation,getter...
}
```

-End<br>
搬运自Vuejs.org
